version: '3.8'

services:
  tests:
    # This builds the test container using a specific Dockerfile for testing. I do not see any Dockerfile.test for front-end.
    # TODO: include front-end tests as well
    build:
      context: ./Back-End
      dockerfile: Dockerfile.test
    depends_on:
      - backend
      - sqlserver
      - redis
    networks:
      - app-network
    entrypoint: >
      sh -c "
      ./ping-backend.sh &&
      npm test
      "

  frontend:
    build:
      context: ./front-end
      dockerfile: Dockerfile
    ports:
      # This exposes port 3000 on the host machine meaning. I do not know what proxy solution they are using for SSL and port mapping (443-->3000)
      - "3000:3000"
    depends_on:
      - backend

  backend:
    # This builds the backend container using its Dockerfile
    build:
      context: ./Back-End
      dockerfile: Dockerfile
    # This exposes port 8000 on the host machine meaning that it is accessible EXTERNALLY. Need to check firewall configurations deployed on server
    ports:
      - "8000:8000"
    environment:
      - SQL_SERVER_HOST=sqlserver
      - SQL_SERVER_USER=sa
      - SQL_SERVER_PASSWORD_FILE=/run/secrets/sql_server_password
      - SQL_SERVER_DATABASE=master
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis:6379
    volumes:
      # I don't know what this backup folder is for.
      - ./backups:/var/backups
    depends_on:
      - sqlserver
      - redis
    networks:
      - app-network
    secrets:
      - sql_server_password

  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    user: root  # Ensure the container runs as root for initialization
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD_FILE=/run/secrets/sql_server_password
      - MSSQL_PID=Developer
      # This allows the FRONTEND to talk to the DATABASE directly (potentially bypassing the backend) for CORS using PUBLIC IP
      - CORS_ORIGIN=http://167.71.165.174:3000
    # This exposes port 1433 on the host machine meaning that it is accessible EXTERNALLY. Need to check firewall configurations deployed on server
    ports:
      - "1433:1433"
    volumes:
      - mssql-data:/var/opt/mssql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./entrypoint-sql.sh:/usr/src/app/entrypoint-sql.sh
    entrypoint: ["/bin/sh", "/usr/src/app/entrypoint-sql.sh"]
    networks:
      - app-network
    secrets:
      - sql_server_password

  redis:
    image: redis:latest
    container_name: my-redis
    # This exposes port 6379 on the host machine meaning that it is accessible EXTERNALLY. Need to check firewall configurations deployed on server
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mssql-data:
  redis-data:

secrets:
  sql_server_password:
    file: ./secrets/sql_server_password.txt