# This workflow connects to the server, pulls latest changes and builds the docker image on the spot.
# This is not optimial because building the image in prod can lead to downtime if the build takes too long (and it does take time to build).

name: Deploy

on:
  push:
    branches:
      - main # So here it does not wait until system tests pass. We can change this if we want to only deploy after tests pass (merge the 2 workflows)
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # A quick search shows that Droplet is a term used by DigitalOcean for their virtual private servers (VPS).
      # This step connects to the Droplet using SSH and deploys the latest changes using Docker Compose.
      # TODO: Get access to the server and set up SSH keys in GitHub secrets.
      - name: SSH into Droplet and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          #set -e: if any command fails, the script will exit immediately with a non-zero status.
          #if docker compose version...: Detects Docker Compose command exists on Droplet
          #if [ -n "$GHCR_USER" ] && [ -n "$GHCR_TOKEN" ]; then...: Log in to GitHub Container Registry (GHCR) if credentials are provided
          script: |
            set -e
            cd /root/TrackMyDegree
            git pull origin main

            if docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            else
              DC="docker-compose"
            fi

            if [ -n "$GHCR_USER" ] && [ -n "$GHCR_TOKEN" ]; then
              echo "$GHCR_TOKEN" | docker login ghcr.io -u "$GHCR_USER" --password-stdin
            fi

            echo "Pulling latest images from GHCR..."
            $DC -f docker-compose.prod.yml pull

            echo "Recreating containers..."
            $DC -f docker-compose.prod.yml up -d --remove-orphans

            echo "Cleaning up unused images..."
            docker image prune -f

            echo "âœ… Deployment complete!"
