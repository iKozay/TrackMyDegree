# This workflow focuses on testing but I dont see anything related to creating the docker image for deployment.

name: System Test

on:
  push:
    branches:
      - main
      - Dev-Release-2 # I think they had a dev branch for each release. We can apply same strategy or just create one single dev branch
  pull_request:
    branches:
      - main
      - Dev-Release-2 # Same as above
  workflow_dispatch:

jobs:
  docker-compose:
    runs-on: ubuntu-latest

    steps:
      - name: Clone Repo
        uses: actions/checkout@v2

      # May need to look into healthchecks for each service to ensure they're fully up before testing instead of a fixed sleep
      - name: Start services with Docker Compose
        run: |
          docker compose -f docker-compose.yml up --build -d
          sleep 10  # Wait briefly to ensure all services are up
      
      # They have a dedicated container that runs the tests. It then checks its exit code to determine success or failure.
      - name: Run Tests
        run: |
          docker logs $(docker ps -a -q --filter "name=trackmydegree-tests")  # Print test logs for visibility
          if [ "$(docker inspect -f '{{.State.ExitCode}}' $(docker ps -a -q --filter "name=trackmydegree-tests"))" -ne 0 ]; then
            echo "Tests failed!"
            exit 1
          fi
          echo "Tests passed successfully."

      # I am not sure what this step is doing. Tried running the command locally and it says invalid filter
      # I think what they meant to do: docker ps --filter "status=exited"
      # See: https://docs.docker.com/reference/cli/docker/container/ls/#status
      - name: Check for errors in logs
        run: |
          if [ -n "$(docker ps --filter "status=stopped")" ]; then
            echo "Error detected in logs"
            exit 1
          fi

      # Stop and clean up
      - name: Stop and remove Docker Compose services
        run: docker compose down

  # TODO: Optimize this by running tests only once and sharing coverage data
  sonarcloud:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install dependencies for frontend
        working-directory: ./front-end
        run: |
          npm install

      - name: Install dependencies for backend
        working-directory: ./Back-End
        run: |
          npm install

      # Here I am running tests again for coverage reporting to SonarCloud
      - name: Run frontend tests with coverage
        working-directory: ./front-end
        run: |
          npm test -- --coverage

      # Here I am running tests again for coverage reporting to SonarCloud
      - name: Run backend tests with coverage
        working-directory: ./Back-End
        run: |
          npm test -- --coverage

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}