# This workflow focuses on testing but I dont see anything related to creating the docker image for deployment.

name: System Test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:


jobs:
  # 1) Checkout + Node setup
  setup:
    runs-on: ubuntu-latest
    outputs:
      repo-artifact: repo
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Pack repository for downstream jobs
        run: |
          tar -czf repo.tar.gz .

      - name: Upload repository artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo
          path: repo.tar.gz

  # 3) Frontend tasks (runs in parallel with backend & scraper)
  frontend:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download repo
        uses: actions/download-artifact@v4
        with:
          name: repo
          path: repo

      - name: Extract repo
        run: |
          tar -xzf repo/repo.tar.gz -C .

      - name: Install dependencies for frontend
        working-directory: ./front-end
        run: |
          npm install

      - name: Run ESLint for frontend
        working-directory: ./front-end
        run: |
          npm run lint

      - name: Run frontend tests with coverage
        working-directory: ./front-end
        run: |
          npm run build
          npm test -- --coverage

      - name: Upload frontend coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: front-end/coverage

  # 4) Backend tasks (runs in parallel)
  backend:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download repo
        uses: actions/download-artifact@v4
        with:
          name: repo
          path: repo

      - name: Extract repo
        run: |
          tar -xzf repo/repo.tar.gz -C .

      - name: Install dependencies for backend
        working-directory: ./Back-End
        run: |
          npm install

      - name: Run ESLint for backend
        working-directory: ./Back-End
        run: |
          npm run lint

      - name: Run backend tests with coverage
        working-directory: ./Back-End
        run: |
          npm run build
          npm test -- --coverage
      
      - name: Upload backend coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: Back-End/coverage

  # 5) Scraper tests (runs in parallel)
  scraper:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Download repo
        uses: actions/download-artifact@v4
        with:
          name: repo
          path: repo

      - name: Extract repo
        run: |
          tar -xzf repo/repo.tar.gz -C .

      - name: Run scraper tests with coverage
        working-directory: ./Back-End/course-data/Scraping
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          coverage run -m pytest
          coverage xml -o coverage.xml
          deactivate
      
      - name: Upload scraper coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: scraper-coverage
          path: Back-End/course-data/Scraping/coverage.xml

  # 6) SonarCloud Scan - waits for frontend, backend, scraper to finish
  sonarcloud:
    needs: [frontend, backend, scraper]
    runs-on: ubuntu-latest
    steps:
      - name: Download coverage artifacts (frontend)
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: coverage/frontend

      - name: Download backend coverage artifact (backend)
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: coverage/backend

      - name: Download scraper coverage artifact (scraper)
        uses: actions/download-artifact@v4
        with:
          name: scraper-coverage
          path: coverage/scraper

      - name: Run SonarCloud Scan
        uses: sonarsource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  
  #This jobs set up a docker image and push to GitHub Container Registry (GHCR)
  publish-ghcr:
    runs-on: ubuntu-latest
    needs: [sonarcloud]    # only run if tests pass
    if: ${{ github.ref == 'refs/heads/main' }}  # publish only on main branch
    permissions: #Github_token by default has read only access for centent. It is needed to set the write permission
      contents: read
      packages: write

    strategy: #Images of both front-end and back-end are built and pushed to GHCR
      matrix:
        include:
          - name: backend
            context: ./Back-End
            image: trackmydegree-backend
          - name: frontend
            context: ./front-end
            image: trackmydegree-frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push ${{ matrix.name }} Image
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          IMAGE=ghcr.io/$OWNER/${{ matrix.image }}
          echo "ðŸ”¨ Building $IMAGE..."
          docker build -t $IMAGE:latest ${{ matrix.context }}
          echo "ðŸ“¦ Pushing $IMAGE..."
          docker push $IMAGE:latest
          echo "âœ… Successfully pushed $IMAGE:latest"
